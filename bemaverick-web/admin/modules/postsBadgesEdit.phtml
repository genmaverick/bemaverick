<?php
$input = $this->input;
$site = $this->site;
$formatFormBootstrap = $this->formatFormBootstrap2();

$responseStatus = $input->responseStatus;
$responseType = $input->responseType;
$challengeId = $input->challengeId;
$postType = $input->postType;
$mentorId = $input->mentorId;
$username = $input->username;
$count = $input->count ? $input->count : 20;
$offset = $input->offset ? $input->offset : 1;
$sort = $input->sort ? $input->sort : 'createdTimestamp';
$sortOrder = $input->sortOrder ? $input->sortOrder : 'desc';

$badgeAsUserId = $input->badgeAsUserId;

$userId = null;
if ( $username ) {
    $user = $site->getUserByUsername( $input->username );
    $userId = $user ? $user->getId() : -1;
}

$filterBy = array(
    'responseStatus' => $responseStatus,
    'postType' => $postType,
    'responseType' => $responseType,
    'challengeId' => $challengeId,
    'challengeUserId' => $mentorId,
    'userId' => $userId,
);

$sortBy = array(
    'sort' => $sort,
    'sortOrder' => $sortOrder,
);

$responses = $site->getResponses( $filterBy, $sortBy, $count, $offset-1 );
$responseCount = $site->getResponseCount( $filterBy );

// set the table data
$columns = array( 'responseId', 'responseStatus', 'postType', 'responseType', 'responseVideoPlayer', 'responseUsername', 'responseChallengeTitle', 'responseCreatedTimestamp', 'responseEditBadge' );

$columnInfo = $this->getTableInfo()->getColumnInfo( $columns );

// we want the next click to be reverse sort order
$sortParams = array(
    'responseStatus' => $responseStatus,
    'challengeId' => $challengeId,
    'challengeUserId' => $mentorId,
    'username' => $username,
    'sort' => '_sort_',
    'sortOrder' => $sortOrder == 'desc' ? 'asc' : 'desc',
    'badgeAsUserId' => $badgeAsUserId,
);

$tableInitVars = array(
    'columns' => $columns,
    'columnInfo' => $columnInfo,
    'rowIdPrefix' => 'response',
    'dontUseGroups' => true,
    'sort' => array(
        'url' => $this->url( 'postsBadgesEdit', $sortParams ),
        'column' => 'response',
        'value' => $sort,
        'isDynamic' => true,
    ),
    'tableAttributes' => array( 'class' => 'table table-striped table-bordered' ),
);

$tableDataInput = array(
    'user' => $badgeAsUserId ? $site->getUser( $badgeAsUserId ) : null
);

$tableData = $this->getTableData( $responses, $columns, $tableDataInput );

$tableInitVars['rows'] = array_keys( $tableData );

$table = $this->table( $tableData, $tableInitVars );

// pagination params
$paginationParams = array(
    'responseStatus' => $responseStatus,
    'responseType' => $responseType,
    'challengeId' => $challengeId,
    'challengeUserId' => $mentorId,
    'username' => $username,
    'sort' => $sort,
    'sortOrder' => $sortOrder,
    'badgeAsUserId' => $badgeAsUserId,
);

$paginationVars = array(
    'offset' => $offset,
    'urlIndex' => 'postsBadgesEdit',
    'totalItems' => $responseCount,
    'perPage' => $count,
    'itemType' => 'Posts',
    'displayPrefix' => 'Displaying',
    'of' => 'of',
    'paginationParams' => $paginationParams,
    'hideIfEmpty' => true,
    'alwaysShowPrevNext' => true,
    'labels' => array( '&laquo; Prev', 'Next &raquo;'),
    'showItemCounts' => true,
    'showPaginationIfOnePage' => false,
    'listAttributes' => array(
       'class' => 'pagination'
    ),
    'containerAttributes' => array(
        'class' => 'pagination-wrap'
    )
);

$formItems = array();
$formItems[] = $formatFormBootstrap->getResponseStatus( $responseStatus, null );
$formItems[] = $formatFormBootstrap->getPostType( $postType, null );
$formItems[] = $formatFormBootstrap->getResponseType( $responseType, null );
$formItems[] = $formatFormBootstrap->getChallengeAutocomplete( $challengeId, null );
$formItems[] = $formatFormBootstrap->getMentor( $mentorId, null );

$inputSettings = array(
    'isRequired' => false
);

$optionSettings = array(
    'attributes' => array(
        'class' => 'form-item--large',
    ),
);

$formItems[] = $formatFormBootstrap->getUsername( $username, null, $inputSettings, null, $optionSettings );

$formItems[] = $formatFormBootstrap->getButton( array( 'text' => 'Filter', 'style' => 'default' ) );
?>

<div class="page-header">
    <h1 class="page-header-title">Badge Posts</h1>
    <?php
    $mentorFormItems = array();

    $items = array(
        '' => array( 'value' => '', 'text' => '' ),
    );

    $sortBy = array(
        'sort' => 'mentorName',
        'sortOrder' => 'asc',
    );

    $mentors = $site->getMentors( null, $sortBy );
    foreach ( $mentors as $mentor ) {
        $items[$mentor->getId()] = array( 'value' => $mentor->getId(), 'text' => $mentor->getName() );
    }

    $inputSettings = array(
        'value' => $badgeAsUserId,
        'defaultValue' => '',
        'name' => 'badgeAsUserId',
        'items' => $items,
        'attributes' => array(
            'data-on-change-submit' => 1
        )
    );

    $labelSettings = array(
        'text' => 'Badge As Catalyst',
    );

    $options = array(
        'attributes' => array(
            'class' => 'form-item--medium'
        )
    );

    $mentorFormItems[] = $formatFormBootstrap->getSelect( $inputSettings, $labelSettings, $options );

    print '
        <form method="get" action="'.$this->url( 'postsBadgesEdit' ).'">
            '.$formatFormBootstrap->getList( $mentorFormItems ).'
        </form>
    ';
    ?>
</div>

<div class="button-bars">
    <div class="button-bar--filter button-bar">
        <form method="get" action="<?php print $this->url( 'postsBadgesEdit' ); ?>">
            <div class="filter">
                <?php print $formatFormBootstrap->getList( $formItems ); ?>
                <?php
                if ( $badgeAsUserId ) {
                    print $formatFormBootstrap->getHiddenSimple( 'badgeAsUserId', $badgeAsUserId );
                }
                ?>
            </div>
        </form>
    </div>
</div>

<div class="table-responsive">
    <?php print $table; ?>
</div>

<div class="pagination-bar">
    <?php print $this->searchPagination( $paginationVars ); ?>
</div>

